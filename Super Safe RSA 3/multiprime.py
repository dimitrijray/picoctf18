#!usr/bin/python
# -*- coding: utf-8 -*-
#@author: Dimitrij Ray
def inverse(e,n):
	old_n = n
	q_a = 0
	q_b = 1
	r = e
	while r > 1:
		q = n//e
		r = n%e
		dummy = q_b
		q_b = q_a - q * q_b
		q_a = dummy
		n = e
		e = r
	return q_b if q_b>0 else q_b+old_n

def sqmmod(m,e,n=0):
	temp = 1
	if n == 0:
		while e > 0:
			if e%2 == 1:
				temp *= m
			m *= m
			e = e >> 1
	else:
		while e > 0:
			if e%2 == 1:
				temp = (temp*m)%n
			m = (m**2)%n
			e = e >> 1
	return temp

#RSA-details
c=3204398087835064743147128033519214620973364156642163452791454276468691098772725554294278219849857073466715186448799993096396032456484461455942589792742189623111945234753672558024963411277488525651597922946454526902245210497796344917766758602624451514661467382130301231574131474222171438804034785380663719
n=3414450524183187188357903142815632112566363357927771778401805850150042293218260341561650040026649971528720596257711762254949694924997689671833791101618293701440788130810402727236944394349219043291180612216652585439527013761628031793002595212636138281726496917401454072266390778869581236582360058317206903
e=65537
primes = [2169879199,2206647637,2214139231,2219261827,2249184653,2292448241,2339824757,2399910041,2406737407,2480901869,2613956773,2685985789,2936548627,2945562923,3010153631,3043194559,3081144071,3272386811,3332273621,3387420649,3400517881,3626381611,3637519643,3761819339,3811462379,3860969131,3937924927,4201442957,4203226007,4227498299,4259051977,4264128719]
totient = 1
for i in primes:
	totient *= (i-1)

#Find the inverse of e mod totient.
d = inverse(e,totient)
plaintext = sqmmod(c,d,n)
what_the_hex = hex(plaintext)
what_the_hex = what_the_hex[2:len(what_the_hex)-1]
print(what_the_hex.decode('hex'))